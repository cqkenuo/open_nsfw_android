package com.zwy.demo.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zwy.demo.dbbean.ImageBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IMAGE_BEAN".
*/
public class ImageBeanDao extends AbstractDao<ImageBean, Long> {

    public static final String TABLENAME = "IMAGE_BEAN";

    /**
     * Properties of entity ImageBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CreateTime = new Property(0, String.class, "createTime", false, "CREATE_TIME");
        public final static Property Id = new Property(1, Long.class, "id", true, "_id");
        public final static Property ImgUrl = new Property(2, String.class, "imgUrl", false, "IMG_URL");
        public final static Property Nsfw = new Property(3, Float.class, "nsfw", false, "NSFW");
        public final static Property Sfw = new Property(4, Float.class, "sfw", false, "SFW");
    }


    public ImageBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ImageBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IMAGE_BEAN\" (" + //
                "\"CREATE_TIME\" TEXT," + // 0: createTime
                "\"_id\" INTEGER PRIMARY KEY ," + // 1: id
                "\"IMG_URL\" TEXT," + // 2: imgUrl
                "\"NSFW\" REAL," + // 3: nsfw
                "\"SFW\" REAL);"); // 4: sfw
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IMAGE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ImageBean entity) {
        stmt.clearBindings();
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(1, createTime);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(3, imgUrl);
        }
 
        Float nsfw = entity.getNsfw();
        if (nsfw != null) {
            stmt.bindDouble(4, nsfw);
        }
 
        Float sfw = entity.getSfw();
        if (sfw != null) {
            stmt.bindDouble(5, sfw);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ImageBean entity) {
        stmt.clearBindings();
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(1, createTime);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(3, imgUrl);
        }
 
        Float nsfw = entity.getNsfw();
        if (nsfw != null) {
            stmt.bindDouble(4, nsfw);
        }
 
        Float sfw = entity.getSfw();
        if (sfw != null) {
            stmt.bindDouble(5, sfw);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
    }    

    @Override
    public ImageBean readEntity(Cursor cursor, int offset) {
        ImageBean entity = new ImageBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // createTime
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // imgUrl
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // nsfw
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4) // sfw
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ImageBean entity, int offset) {
        entity.setCreateTime(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setImgUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNsfw(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setSfw(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ImageBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ImageBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ImageBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
